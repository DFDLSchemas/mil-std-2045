<?xml version="1.0" encoding="UTF-8"?>
<!-- <![CDATA[

Copyright (c) 2014-2022 Owl Cyber Defense. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal with
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimers.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimers in the
    documentation and/or other materials provided with the distribution.

 3. Neither the names of Owl Cyber Defense, nor the names of its contributors
    may be used to endorse or promote products derived from this Software
  without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
SOFTWARE.
  ]]> -->
<schema
  targetNamespace="urn:milstd2045DFDLInternal"
  xmlns:ms2045="urn:milstd2045DFDLInternal"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:dfdlx="http://www.ogf.org/dfdl/dfdl-1.0/extensions"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:fn="http://www.w3.org/2005/xpath-functions"
  elementFormDefault="unqualified">

  <include schemaLocation="org/apache/daffodil/xsd/DFDLGeneralFormat.dfdl.xsd"/>

  <!-- This file exists to avoid polluting the namespace. I.e., the primary namespace 
    of symbols that a user of the DFDL Schema will need to use should ONLY have symbols 
    they may need to use. Implementation dependent symbols go in an explicitly milstd2045DFDLInternal 
    namespace that will not be bound to a prefix by most of the DFDL Schemas for milstd2045 
    or related standards. -->

  <annotation>
    <appinfo source="http://www.ogf.org/dfdl/">

      <!-- Note: The default format doesn't provide a default for length kind. So 
        it forces us to annotate every element its specific dfdl:ref or we'll get an error 
        message. That's good because this schema really does need you to put a dfdl:ref on 
        every element to tell us if it is a field or a group, optional or required, and repeating. -->

      <dfdl:defineFormat name="msBase">
        <dfdl:format
          ref="ms2045:GeneralFormat"
          fillByte="%#r00;"
          lengthUnits="bits"
          alignment="1"
          alignmentUnits="bits"
          representation="binary"
          encoding="X-DFDL-US-ASCII-7-BIT-PACKED"
          binaryNumberRep="binary"
          byteOrder="littleEndian"
          bitOrder="leastSignificantBitFirst"
          encodingErrorPolicy="replace"/>
      </dfdl:defineFormat>

      <dfdl:defineVariable name="yearStr" type="xs:string" dfdlx:direction="parseOnly"/>
      <dfdl:defineVariable name="monthStr" type="xs:string" dfdlx:direction="parseOnly"/>
      <dfdl:defineVariable name="dayStr" type="xs:string" dfdlx:direction="parseOnly"/>
      <dfdl:defineVariable name="hourStr" type="xs:string" dfdlx:direction="parseOnly"/>
      <dfdl:defineVariable name="minuteStr" type="xs:string" dfdlx:direction="parseOnly"/>
      <dfdl:defineVariable name="secondStr" type="xs:string" dfdlx:direction="parseOnly"/>

      <!--
      the default format makes sequences behave properly, but every element
      needs an explicit dfdl:ref to provide its length kind and (if optional or repeating)
      occursCountKind.
      -->

      <dfdl:format ref="ms2045:msBase"/>
    </appinfo>
  </annotation>

  <!-- Resusable groups used to capture presence and repeat bit structure. The interface 
    are three reusable groups named FPI, FRI, GPI, and GRI. -->

  <simpleType name="presenceIndicator" dfdl:length="1"
              dfdl:ref="ms2045:msBase" dfdl:lengthKind="explicit">
    <restriction base="xs:unsignedInt"/>
  </simpleType>

  <simpleType name="repeatIndicator" dfdl:length="1" dfdl:ref="ms2045:msBase"
              dfdl:lengthKind="explicit">
    <restriction base="xs:unsignedInt"/>
  </simpleType>

  <group name="GRI_discriminator">
    <sequence>
      <sequence>
        <annotation>
          <appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:discriminator>{ if (dfdl:occursIndex() eq 1) then
              fn:true() else
              ../item[dfdl:occursIndex()-1]/GRI
              eq 1 }
            </dfdl:discriminator>
          </appinfo>
        </annotation>
      </sequence>
      <element name="GRI" type="ms2045:repeatIndicator"
               dfdl:outputValueCalc="{ if (dfdl:occursIndex() lt fn:count(..)) then 1 else 0 }"/>
    </sequence>
  </group>

  <group name="FRI_discriminator">
    <sequence>
      <sequence>
        <annotation>
          <appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:discriminator>{ if (dfdl:occursIndex() eq 1)
              then
              fn:true() else
              ../item[dfdl:occursIndex()-1]/FRI
              eq 1 }
            </dfdl:discriminator>
          </appinfo>
        </annotation>
      </sequence>
      <element name="FRI" type="ms2045:repeatIndicator"
               dfdl:outputValueCalc="{ if (dfdl:occursIndex() lt fn:count(..)) then 1 else 0 }"/>
    </sequence>
  </group>

  <group name="data_compression_type_PI">
    <sequence>
      <element name="data_compression_type_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../data_compression_type) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="originator_address_group_PI">
    <sequence>
      <element name="originator_address_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../originator_address_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="recipient_address_group_PI">
    <sequence>
      <element name="recipient_address_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../recipient_address_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="information_address_group_PI">
    <sequence>
      <element name="information_address_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../information_address_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="urn_PI">
    <sequence>
      <element name="urn_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../urn) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="unit_name_PI">
    <sequence>
      <element name="unit_name_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../unit_name) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="header_size_PI">
    <sequence>
      <element name="header_size_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../header_size) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="message_standard_version_PI">
    <sequence>
      <element name="message_standard_version_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../message_standard_version) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="vmf_message_identification_group_PI">
    <sequence>
      <element name="vmf_message_identification_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../vmf_message_identification_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="file_name_PI">
    <sequence>
      <element name="file_name_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../file_name) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="message_size_PI">
    <sequence>
      <element name="message_size_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../message_size) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="originator_dtg_group_PI">
    <sequence>
      <element name="originator_dtg_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../originator_dtg_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="dtg_extension_PI">
    <sequence>
      <element name="dtg_extension_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../dtg_extension) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="perishability_dtg_group_PI">
    <sequence>
      <element name="perishability_dtg_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../perishability_dtg_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="acknowledgement_request_group_PI">
    <sequence>
      <element name="acknowledgement_request_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../acknowledgement_request_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="response_data_group_PI">
    <sequence>
      <element name="response_data_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../response_data_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="reference_message_data_group_PI">
    <sequence>
      <element name="reference_message_data_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../reference_message_data_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>


  <group name="message_security_group_PI">
    <sequence>
      <element name="message_security_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../message_security_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="keying_material_group_PI">
    <sequence>
      <element name="keying_material_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../keying_material_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>


  <group name="cryptographic_initialization_group_PI">
    <sequence>
      <element name="cryptographic_initialization_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../cryptographic_initialization_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="key_token_group_PI">
    <sequence>
      <element name="key_token_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../key_token_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>


  <group name="authentication_data_a_group_PI">
    <sequence>
      <element name="authentication_data_a_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../authentication_data_a_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="authentication_data_b_group_PI">
    <sequence>
      <element name="authentication_data_b_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../authentication_data_b_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="message_security_padding_group_PI">
    <sequence>
      <element name="message_security_padding_group_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../message_security_padding_group) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="message_security_padding_PI">
    <sequence>
      <element name="message_security_padding_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../message_security_padding) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>


  <group name="message_subtype_PI">
    <sequence>
      <element name="message_subtype_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../message_subtype) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="cantco_reason_code_PI">
    <sequence>
      <element name="cantco_reason_code_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../cantco_reason_code) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>


  <group name="cantpro_reason_code_PI">
    <sequence>
      <element name="cantpro_reason_code_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../cantpro_reason_code) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>

  <group name="reply_amplification_PI">
    <sequence>
      <element name="reply_amplification_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{ fn:count(../../reply_amplification) }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>
  <!--
  Special case outputValueCalc because of the choice of control_release_marking_C/D1 elements.
  -->
  <group name="control_release_marking_PI">
    <sequence>
      <element name="control_release_marking_PI" dfdl:lengthKind="implicit">
        <complexType>
          <sequence>
            <element name="value" type="ms2045:presenceIndicator"
                     dfdl:outputValueCalc='{
                       if (fn:exists(../../control_release_marking_D1))
                       then fn:count(../../control_release_marking_D1)
                        else if (fn:exists(../../control_release_marking_C))
                        then fn:count(../../control_release_marking_C)
                        else 0
                        }'/>
          </sequence>
        </complexType>
      </element>
    </sequence>
  </group>
</schema>
