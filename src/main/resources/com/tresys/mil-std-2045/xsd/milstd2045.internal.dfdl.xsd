<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (c) 2014 Tresys Technology, LLC. All rights reserved. Developed by: 
  Tresys Technology, LLC http://www.tresys.com Permission is hereby granted, free of 
  charge, to any person obtaining a copy of this software and associated documentation 
  files (the "Software"), to deal with the Software without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Software, and to permit persons to whom the Software is 
  furnished to do so, subject to the following conditions: 1. Redistributions of source 
  code must retain the above copyright notice, this list of conditions and the following 
  disclaimers. 2. Redistributions in binary form must reproduce the above copyright 
  notice, this list of conditions and the following disclaimers in the documentation 
  and/or other materials provided with the distribution. 3. Neither the names of Tresys 
  Technology, nor the names of its contributors may be used to endorse or promote products 
  derived from this Software without specific prior written permission. THE SOFTWARE 
  IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
  BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
  AND NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT 
  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE 
  OR OTHER DEALINGS WITH THE SOFTWARE. -->
<xs:schema targetNamespace="urn:milstd2045DFDLInternal" xmlns:tns="urn:milstd2045DFDLInternal"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions"
  elementFormDefault="unqualified">

  <!-- This file exists to avoid polluting the namespace. I.e., the primary namespace 
    of symbols that a user of the DFDL Schema will need to use should ONLY have symbols 
    they may need to use. Implementation dependent symbols go in an explicitly milstd2045DFDLInternal 
    namespace that will not be bound to a prefix by most of the DFDL Schemas for milstd2045 
    or related standards. -->

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">

      <!-- Note: The default format doesn't provide a default for length kind. So 
        it forces us to annotate every element its specific dfdl:ref or we'll get an error 
        message. That's good because this schema really does need you to put a dfdl:ref on 
        every element to tell us if it is a field or a group, optional or required, and repeating. -->

      <dfdl:defineFormat name="thesePropertiesShouldNotMatter">
        <dfdl:format textStandardBase='10' binaryFloatRep='ieee'
          calendarPatternKind='implicit' escapeSchemeRef=''
          documentFinalTerminatorCanBeMissing='no' ignoreCase='no'
          separatorPolicy='suppressed' separatorPosition='infix' textNumberRep='standard'
          textNumberCheckPolicy='strict' textStringJustification='left'
          emptyValueDelimiterPolicy="both" utf16Width="fixed" textTrimKind="none" 
          truncateSpecifiedLengthString="no"
          textPadKind="none"
          binaryNumberCheckPolicy="lax"
          fillByte="%#r00;"
          textBidi="no"
          floating="no"
          choiceLengthKind='implicit'
          outputNewLine='{$dfdl:outputNewLine}' />
      </dfdl:defineFormat>

      <dfdl:defineFormat name="msBase">
        <dfdl:format ref="tns:thesePropertiesShouldNotMatter"
          sequenceKind='ordered' initiator="" terminator="" separator=""
          initiatedContent='no' leadingSkip='0' trailingSkip='0'
          textStringPadCharacter='%SP;' lengthUnits="bits" alignment="1"
          alignmentUnits="bits" representation="binary" encoding="X-DFDL-US-ASCII-7-BIT-PACKED"
          binaryNumberRep="binary" byteOrder="littleEndian" bitOrder="leastSignificantBitFirst"
          encodingErrorPolicy="replace" 
          outputNewLine="%LF;" textOutputMinLength="0"/>
      </dfdl:defineFormat>

      <!-- the default format makes sequences behave properly, but every element 
        needs an explicit dfdl:ref to provide its length kind and (if optional or repeating) 
        occursCountKind. -->
      <dfdl:format ref="tns:msBase" />


    </xs:appinfo>
  </xs:annotation>

  <!-- Resusable groups used to capture presence and repeat bit structure. The interface 
    are three reusable groups named FPI, FRI, GPI, and GRI. -->
  <xs:simpleType name="presenceIndicator" dfdl:length="1"
    dfdl:ref="tns:msBase" dfdl:lengthKind="explicit">
    <xs:restriction base="xs:unsignedInt" />
  </xs:simpleType>

  <xs:simpleType name="repeatIndicator" dfdl:length="1" dfdl:ref="tns:msBase"
    dfdl:lengthKind="explicit">
    <xs:restriction base="xs:unsignedInt" />
  </xs:simpleType>

  <xs:group name="PI_true">
    <xs:sequence>
      <xs:element name="h_PI_true" type="tns:presenceIndicator" dfdl:outputValueCalc="{ 1 }">
        <xs:annotation>
          <xs:appinfo source="http://www.ogf.org/dfdl/">
            <dfdl:discriminator test="{ . eq 1 }" />
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:group>

  <xs:group name="PI_false">
    <xs:sequence>
      <xs:element name="h_PI_false" type="tns:presenceIndicator" dfdl:outputValueCalc="{ 0 }" />
    </xs:sequence>
  </xs:group>

  <xs:group name="GRI">
    <xs:sequence>
      <xs:element name="GRI" type="tns:repeatIndicator" dfdl:outputValueCalc="{ if (dfdl:occursIndex() lt fn:count(..)) then 1 else 0 }" />
    </xs:sequence>
  </xs:group>

  <xs:group name="FRI">
    <xs:sequence>
      <xs:element name="FRI" type="tns:repeatIndicator" dfdl:outputValueCalc="{ if (dfdl:occursIndex() lt fn:count(..)) then 1 else 0 }" />
    </xs:sequence>
  </xs:group>

  <!-- MS2045 String Model -->

  <xs:group name="tString32">
    <xs:sequence>
      <xs:element name="value" type="xs:string" dfdl:lengthKind="pattern"
        dfdl:lengthPattern="[^\x7F]{0,31}(?=\x7F)|.{32}" />
      <xs:sequence
        dfdl:terminator="{if (fn:string-length(./value) eq 32) then '%ES;' else '%DEL;'}" />
    </xs:sequence>
  </xs:group>

  <xs:group name="tString50">
    <xs:sequence>
      <xs:element name="value" type="xs:string" dfdl:lengthKind="pattern"
        dfdl:lengthPattern="[^\x7F]{0,49}(?=\x7F)|.{50}" />
      <xs:sequence
        dfdl:terminator="{if (fn:string-length(./value) eq 50) then '%ES;' else '%DEL;'}" />
    </xs:sequence>
  </xs:group>

  <xs:group name="tString64">
    <xs:sequence>
      <xs:element name="value" type="xs:string" dfdl:lengthKind="pattern"
        dfdl:lengthPattern="[^\x7F]{0,63}(?=\x7F)|.{64}" />
      <xs:sequence
        dfdl:terminator="{if (fn:string-length(./value) eq 64) then '%ES;' else '%DEL;'}" />
    </xs:sequence>
  </xs:group>

  <!-- For moving over to a byte boundary (at end of messages when they don't end 
    on a byte boundary -->
  <xs:group name="gh_toByteBoundary">
    <xs:sequence>
      <xs:element name="_zero_padding" type="xs:string"
        dfdl:length="0" dfdl:lengthKind="explicit"
        dfdl:alignment="1" dfdl:alignmentUnits="bytes"
        dfdl:outputValueCalc="{ '' }" />
    </xs:sequence>
  </xs:group>




</xs:schema>
